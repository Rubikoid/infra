{
	"submodule": {
		"prefix": "submod",
		"description": "submodule simplifyer",
		"scope": "nix",
		"body": [
			"${1:name} = lib.mkOption {",
			"  type = types.attrsOf (types.submodule ({ name, ... }: {",
			"    options = {",
			"      name = lib.mkOption {",
			"        type = types.str;",
			"        default = name;",
			"      };",
			"    };",
			"  }));",
			"  default = { };",
			"};",
			""
		]
	},
	"lib fake hash": {
		"prefix": "fake",
		"description": "fake hash",
		"scope": "nix",
		"body": [
			"lib.fakeHash"
		]
	},
  // Place your infra workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "base option": {
    "scope": "nix",
    "prefix": "mkopt",
    "body": [
      "${1:name} = lib.mkOption {",
      "  type = types.${2:type};",
      "  default = ${3:default};",
      "};",
      "  "
    ],
    "description": "base option"
  },
  "hostname options": {
    "scope": "nix",
    "prefix": "hostname = lib.mkOpt",
    "body": [
      "hostname = lib.mkOption {",
      "  type = types.str;",
      "  default = \"${1:hostname}\";",
      "};"
    ]
  },
  "generic settings": {
    "scope": "nix",
    "prefix": "generic-settings",
    "body": [
		"{ lib, config, secrets, pkgs, ... }:",
		"",
		"let",
		"  types = lib.types;",
		"  cfg = config.rubikoid.services.${1:name};",
		"in",
		"{",
		"  options.rubikoid.services.${1:name} = {",
		"",
		"  };",
		"",
		"  config = {",
		"",
		"  };",
		"}",
		""
	],
    "description": "generic settings"
},
"generic settings with http": {
	"prefix": "generic-http-settings",
	"description": "generic settings with http",
	"scope": "nix",
	"body": [
		"{ lib, config, secrets, pkgs, ... }:",
		"",
		"let",
		"  types = lib.types;",
		"  cfg = config.rubikoid.services.${1:name};",
		"in",
		"{",
		"  options.rubikoid.services.${1:name} = {",
		"    host = lib.mkOption {",
		"      type = types.str;",
		"      default = \"127.0.0.1\";",
		"    };",
		"",
		"    port = lib.mkOption {",
		"      type = types.port;",
		"      default = ${2:port};",
		"    };",
		"",
		"    caddyName = lib.mkOption {",
		"      type = types.str;",
		"      default = \"${1:name}\";",
		"    };",
		"  };",
		"",
		"  config = {",
		"    services.caddy.virtualHosts.\"${cfg.caddyName}.${secrets.dns.private}\" = {",
		"      extraConfig = ''",
		"        reverse_proxy http://127.0.0.1:${toString cfg.port}",
		"        import stepssl_acme",
		"      '';",
		"    };",
		"  };",
		"}",
		""
	]
},
  "private docker module": {
    "scope": "nix",
    "prefix": "docker-module",
    "body": [
		"{ lib, config, secrets, pkgs, ... }:",
		"",
		"let",
		"  types = lib.types;",
		"  cfg = config.rubikoid.services.${1:name};",
		"in",
		"{",
		"  options.rubikoid.services.${1:name} = {",
		"    version = lib.mkOption {",
		"      type = types.str;",
		"      default = \"${2:version}\";",
		"    };",
		"",
		"    host = lib.mkOption {",
		"      type = types.str;",
		"      default = \"127.0.0.1\";",
		"    };",
		"",
		"    port = lib.mkOption {",
		"      type = types.port;",
		"      default = ${3:port};",
		"    };",
		"",
		"    caddyName = lib.mkOption {",
		"      type = types.str;",
		"      default = \"${1:name}\";",
		"    };",
		"  };",
		"",
		"  config = {",
		"    virtualisation.oci-containers.containers = {",
		"      ${1:name} = {",
		"        image = \"${4:image}:${cfg.version}\";",
		"",
		"        ports = [",
		"          \"${cfg.host}:${toString cfg.port}:${3:port}\"",
		"        ];",
		"",
		"        volumes = [",
		"          \"${cfg.dataFolder}:/var/opt/memos\"",
		"        ];",
		"      };",
		"    };",
		"",
		"    services.caddy.virtualHosts.\"${cfg.caddyName}.${secrets.dns.private}\" = {",
		"      extraConfig = ''",
		"        reverse_proxy http://127.0.0.1:${toString cfg.port}",
		"        import stepssl_acme",
		"      '';",
		"    };",
		"  };",
		"}",
		""
	],
    "description": "private docker module"
  }
}
